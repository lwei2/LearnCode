
class Builder
{
	public:
	  virtual void BuildHead(){}
	  virtual void BuildBody(){}
	  virtual void BuildLeftArm(){}
	  virtual void BuildRightArm(){}
	  virtual void BuildLeftLeg(){}
	  virtual void BuildRightLeg(){}
};
class ThinBuilder:public Builder
{
	public:
	  void BuildHead()
	  {
			cout<<"build thin head"<<endl;	
	  }
	  void BuildBody()
	  {
			cout<<"build thin body"<<endl;
	  }
	  void BuildLeftArm()
	  {
			cout<<"build thin leftarm"<<endl;
	  }
	  void BuildRightArm()
	  {
			cout<<"build thin rightarm"<<endl;
	  }
	  void BuildLeftLeg()
	  {
			cout<<"build thin leftleg"<<endl;
	  }
	  void BuildRightLeg()
	  {
			cout<<"build thin rightleg"<<endl;
	  }
};

class FatBuilder:public Builder
{
	public:
	  void BuildHead()
	  {
			cout<<"build fat head"<<endl;
	  }
	  void BuildBody()
	  {
			cout<<"build fat body"<<endl;
	  }
	  void BuildLeftArm()
	  {
			cout<<"build fat leftarm"<<endl;
	  }
	  void BuildRightArm()
	  {
			cout<<"build fat rightarm"<<endl;
	  }
	  void BuildLeftLeg()
	  {
			cout<<"bulid fat leftleg"<<endl;
	  }
	  void BuildRightLeg()
	  {
			cout<<"build fat rightleg"<<endl;
	  }	
};

class Director
{
	private:
	  Builder *m_pBuilder;
	public:
	  Director(Buidler *builder)
	  {
			m_pBuilder = builder;
	  }
	  void Create()
	  {
			m_pBuilder->BuildHead();
			m_pBuilder->BuildBody();
			m_pBuilder->BuildLeftArm();
			m_pBuilder->BuildRightArm();
			m_pBuilder->BuildLeftLeg();
			m_pBuilder->BuildRightLeg();
	  }
};



int main(void)
{
	FaBuilder thin;
	Director director(&thin);
	director.Create();
	return 0;
}
















