//父类
class Resume
{
	protected:
	  char *name;
	public:
	  Resume(){}
	  virtual ~Resume(){}
	  virtual Resume *Clone() {return NULL}
	  virtual void Set(char *n){}
	  virtual void Show(){}
};

class ResumeA:public Resume
{
	public:
	  ResumeA(const char *str);
	  ResumeA(const ResumeA &r);
	  ~ResumeA();
	  ResumeA *Clone();
	  void Show();
};
ResumeA::ResumeA(const char *str)
{
	if(str == NULL)
	{
	  	name = new char[1];
	  	name[0] = '\0';
	}
	else
	{
		name = new char[strlen(str)+1];
		strcpy(name,str);
	}
}
ResumeA::~ResumeA()
{
	delete[] name;	
}
ResumeA::ResumeA(const ResumeA &r)
{
	name = new char[strlen(r.name)+1];
	strcpy(name,r.name);
}
ResumeA* ResumeA::Clone()
{
	return new ResumeA(*this);
}
void ResumeA::Show()
{
	cout<<"ResumA name:"<<name<<endl;
}

int main(void)
{
	Resume *r1 = new ResumeA("A");
	Resume *r2 = new ResumeB("B");
	Resume *r3 = r1->Clone();
	Resume *r4 = r2->Clone();
	r1->Show();
	r2->Show();
	delete r1;
	delete r2;
	r1=r2=NULL;
	r3->Show();
	r4->Show();
	delete r3;
	delete r4;
	r3=r4=NULL;
	return 0;
}


class Resume
{
	protected:
	  virtual void SetPersonalInfo(){}
	  virtual void SetEducation(){}
	  virtual void SetWorkExp(){}
	public:
	  void FillResume()
	  {
		SetPersonalInfo();
		SetEducation();
		SetWorkExp();
	  }
};
class ResumeA:public Resume
{
	protected:
	  void SetPersonalInfo()
	  {
		cout<<"A's PersonalInfo"<<endl;
	  }
	  void SetEducation()
	  {
		cout<<"A's Education"<<endl;
	  }
	  void SetWorkExp()
	  {
		cout<<"A's Work Experience"<<endl;
	  }
};

class ResumB:public Resume
{
	protected:
	  void SetPersonalInfo()
	  {
		cout<<"B's PersonalInfo"<<endl;
	  }
	  void SetEducation()
	  {
		cout<<"B's Education"<<endl;
	  }
	  void SetWorkExp()
	  {
		cout<<"B's Work Experience"<<endl;
	  }
};

int main(void)
{
  	Resume *r1 = new ResumeA();
	r1->FillResume();
	delete r1;
	r1 = new ResumeB();
	delete r1;
	r1 = NULL;
	return 0;
}





























































































